{"version":3,"file":"static/js/912.7a1c0468.chunk.js","mappings":"mMACA,EAA2B,2BCA3B,EAAuB,6BAAvB,EAAwG,gCAAxG,EAAkJ,gC,2BCkClJ,EA7BuB,SAACA,GACtB,OAAuCC,EAAAA,EAAAA,GAAQC,EAAAA,IAAvCC,EAAW,EAAXA,YAAaC,EAAM,EAANA,OAAQC,EAAK,EAALA,MACvBC,GAAiBC,EAAAA,EAAAA,UACfC,EAAiBR,EAAjBQ,cACRC,EAAAA,EAAAA,YAAU,WACRD,GACF,GAAG,CAACJ,EAAQC,EAAOG,IACnB,IAAME,EAAoB,SAACC,GACzBA,EAAMC,iBACN,IAAMC,EAAOP,EAAeQ,QAAQC,MACpCZ,EAAY,CAAEa,QAAShB,EAAMiB,GAAIJ,KAAAA,IACjCP,EAAeQ,QAAQC,MAAQ,EACjC,EAEA,OACE,kBAAMG,UAAWC,EAAcC,SAAUV,EAAkB,WACzD,iBAAKQ,UAAWC,EAAiBC,SAAUV,EAAkB,WAC3D,kBAAOW,QAAQ,UAAS,SAAC,kBACzB,qBAAUJ,GAAG,UAAUK,KAAK,IAAIC,IAAKjB,QAEvC,gBAAKY,UAAWC,EAAgB,UAC9B,mBAAQD,UAAU,MAAMM,KAAK,SAAQ,SAAC,oBAM9C,E,SChCA,EAAuB,0BCSvB,EARoB,SAACxB,GACnB,OACE,eAAIkB,UAAWC,EAAa,UAC1B,uBAAInB,EAAMa,QAGhB,ECPA,EAA2B,+BCY3B,EAVqB,SAACb,GACpB,OACE,eAAIkB,UAAWC,EAAiB,SAC7BnB,EAAMyB,SAASC,KAAI,SAACC,EAASC,GAAC,OAC7B,SAAC,EAAW,CAA4Bf,KAAMc,EAAQE,aAAY,UAA7CF,EAAQV,GAAE,YAAIW,GAAkC,KAI7E,E,SCwDA,EA1DiB,WACf,IAMIH,EANJ,GAKIxB,EAAAA,EAAAA,GAAQ6B,EAAAA,IAJV3B,EAAW,EAAXA,YACAC,EAAM,EAANA,OACM2B,EAAW,EAAjBC,KACA3B,EAAK,EAALA,MAGI4B,GAASC,EAAAA,EAAAA,MACHlB,EAAYiB,EAAhBhB,GACR,GAA8CkB,EAAAA,EAAAA,WAAS,GAAM,eAAtDC,EAAe,KAAEC,EAAkB,MAI1C5B,EAAAA,EAAAA,YAAU,WACRN,EAAYa,EACd,GAAG,CAACb,EAAaa,IAEjB,IAAMsB,GAAoBC,EAAAA,EAAAA,cAAY,WACpCpC,EAAYa,EACd,GAAG,CAACb,EAAaa,IAsBjB,MApBe,YAAXZ,IACFqB,GACE,gBAAKP,UAAU,WAAU,UACvB,SAACsB,EAAA,EAAc,OAKjBnC,IACFoB,GAAW,cAAGP,UAAU,WAAU,SAAEb,KAGvB,cAAXD,GAA4B2B,GAAsC,IAAvBA,EAAYU,SACzDhB,GAAW,cAAGP,UAAU,WAAU,SAAC,iBAGtB,cAAXd,GAA0B2B,GAAeA,EAAYU,OAAS,IAChEhB,GAAW,SAAC,EAAY,CAACA,SAAUM,MAInC,qBAASb,UAAWC,EAAiB,WACnC,wBAAI,mBACFiB,IACA,mBAAQlB,UAAU,MAAMwB,QAnCC,WAC7BL,GAAmB,EACrB,EAiC8D,SAAC,kBAI1DD,IACC,SAAC,EAAc,CAACnB,GAAIgB,EAAOhB,GAAIT,aAAc8B,IAE9Cb,IAGP,C","sources":["webpack://react-complete-guide/./src/components/comments/Comments.module.css?d88e","webpack://react-complete-guide/./src/components/comments/NewCommentForm.module.css?81c1","components/comments/NewCommentForm.js","webpack://react-complete-guide/./src/components/comments/CommentItem.module.css?204f","components/comments/CommentItem.js","webpack://react-complete-guide/./src/components/comments/CommentsList.module.css?06d6","components/comments/CommentsList.js","components/comments/Comments.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"Comments_comments__VHHiX\"};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"NewCommentForm_form__12V43\",\"loading\":\"NewCommentForm_loading__xMen5\",\"control\":\"NewCommentForm_control__TcHkp\",\"actions\":\"NewCommentForm_actions__B1d7u\"};","import { useEffect, useRef } from \"react\";\n\nimport classes from \"./NewCommentForm.module.css\";\nimport useHttp from \"../hooks/use-http\";\nimport { addComment } from \"../lib/api\";\n\nconst NewCommentForm = (props) => {\n  const { sendRequest, status, error } = useHttp(addComment);\n  const commentTextRef = useRef();\n  const { onCommentAdd } = props;\n  useEffect(() => {\n    onCommentAdd();\n  }, [status, error, onCommentAdd]);\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n    const text = commentTextRef.current.value;\n    sendRequest({ quoteId: props.id, text });\n    commentTextRef.current.value = \"\";\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\" type=\"submit\">\n          Add Comment\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"CommentItem_item__xFD8k\"};","import classes from \"./CommentItem.module.css\";\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"CommentsList_comments__n75t4\"};","import CommentItem from \"./CommentItem\";\nimport classes from \"./CommentsList.module.css\";\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment, i) => (\n        <CommentItem key={`${comment.id}_${i}`} text={comment.commentData} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from \"react\";\n\nimport classes from \"./Comments.module.css\";\nimport NewCommentForm from \"./NewCommentForm\";\nimport useHttp from \"../hooks/use-http\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport CommentsList from \"../comments/CommentsList\";\nimport { useParams } from \"react-router-dom\";\nimport { getAllComments } from \"../lib/api\";\nconst Comments = () => {\n  const {\n    sendRequest,\n    status,\n    data: allComments,\n    error,\n  } = useHttp(getAllComments);\n  let comments;\n  const params = useParams();\n  const { id: quoteId } = params;\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  const addCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  if (status === \"pending\") {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (error) {\n    comments = <p className=\"centered\">{error}</p>;\n  }\n\n  if (status === \"completed\" && (!allComments || allComments.length === 0)) {\n    comments = <p className=\"centered\">No comments</p>;\n  }\n\n  if (status === \"completed\" && allComments && allComments.length > 0) {\n    comments = <CommentsList comments={allComments} />;\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm id={params.id} onCommentAdd={addCommentHandler} />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n"],"names":["props","useHttp","addComment","sendRequest","status","error","commentTextRef","useRef","onCommentAdd","useEffect","submitFormHandler","event","preventDefault","text","current","value","quoteId","id","className","classes","onSubmit","htmlFor","rows","ref","type","comments","map","comment","i","commentData","getAllComments","allComments","data","params","useParams","useState","isAddingComment","setIsAddingComment","addCommentHandler","useCallback","LoadingSpinner","length","onClick"],"sourceRoot":""}